openapi: 3.0.0

info:
  title: Snake-Server API
  description: Snake-Server is a server for multiplayer snake game.
  version: 4.6.0
  license:
    name: MIT
  contact:
    name: Ivan Pushkin
    url: https://twitter.com/IvanDeveloper

servers:
  - url: /api
    description: Current instance
  - url: http://localhost:8080/api
    description: HTTP instance
  - url: https://localhost:8080/api
    description: HTTPS instance

paths:
  /games:
    get:
      summary: Get a list of games
      description: Get all games on the server
      tags:
        - Games
      parameters:
        - name: limit
          in: query
          description: Games limit in the server's response
          schema:
            type: integer
            format: int32
        - name: sorting
          in: query
          description: Games sorting rule
          schema:
            type: string
            enum:
              - smart
              - random
      responses:
        200:
          description: A list of games and additional information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Games'
        400:
          $ref: '#/components/responses/InvalidParameters'
    post:
      summary: Create a new game
      description: Create a new game on the server with given map parameters and limits
      tags:
        - Games
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                limit:
                  description: Players limit for the new game
                  type: integer
                  format: int32
                  minimum: 1
                width:
                  description: Map width
                  type: integer
                  format: int32
                  maximum: 255
                height:
                  description: Map height
                  type: integer
                  format: int32
                  maximum: 255
                enable_walls:
                  description: This boolean parameter indicates whether to add walls to the new game or not to
                  type: boolean
                  default: true
              required:
                - limit
                - width
                - height
      responses:
        201:
          description: Information about the created game
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        400:
          $ref: '#/components/responses/InvalidParameters'
        500:
          $ref: '#/components/responses/ServerError'
        503:
          description: Service unavailable, cannot create a game
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /games/{id}:
    get:
      summary: Get information about a game
      description: Get information about a game by identificator
      tags:
        - Games
      parameters:
        - $ref: '#/components/parameters/GameID'
      responses:
        200:
          description: Information about the game object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        400:
          $ref: '#/components/responses/InvalidParameters'
        404:
          $ref: '#/components/responses/GameNotFound'
        500:
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete a game
      description: Delete a game by identificator
      tags:
        - Games
      parameters:
        - $ref: '#/components/parameters/GameID'
      responses:
        200:
          description: Object with identificator of the deleted game
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deleted'
        400:
          $ref: '#/components/responses/InvalidParameters'
        404:
          $ref: '#/components/responses/GameNotFound'
        500:
          $ref: '#/components/responses/ServerError'
        503:
          description: Service unavailable, cannot delete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /capacity:
    get:
      summary: Server capacity
      tags:
        - Server
      description: Get server capacity. Capacity is the number of opened connections divided by the server's limit
      responses:
        200:
          description: Capacity of the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Capacity'
  /info:
    get:
      summary: Information about the server
      tags:
        - Server
      description: Get information about the server
      responses:
        200:
          description: Returns information about the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Info'
  /games/{id}/broadcast:
    post:
      summary: Broadcast a message
      tags:
        - Games
      description: Broadcast a message to all players in a game with given identificator
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/GameID'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                message:
                  description: Message to be broadcasted for players in a selected game
                  type: string
              required:
                - message
      responses:
        200:
          description: Object contained broadcast result flag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Broadcast'
        400:
          $ref: '#/components/responses/InvalidParameters'
        404:
          $ref: '#/components/responses/GameNotFound'
        500:
          $ref: '#/components/responses/ServerError'
        503:
          description: Service unavailable, cannot broadcast right now
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /games/{id}/objects:
    get:
      summary: A list of objects on the map
      tags:
        - Games
      description: Get all objects on the map
      parameters:
        - $ref: '#/components/parameters/GameID'
      responses:
        200:
          description: All objects on the map
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Objects'
        400:
          $ref: '#/components/responses/InvalidParameters'
        404:
          $ref: '#/components/responses/GameNotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /ping:
    get:
      summary: Ping-pong requesting
      tags:
        - Server
      description: Ping request to check the server's availability
      responses:
        200:
          description: Pong response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pong'
components:

  parameters:
    GameID:
      in: path
      name: id
      schema:
        type: integer
        format: int32
      required: true
      description: Game identificator

  responses:
    InvalidParameters:
      description: Invalid parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    GameNotFound:
      description: Game not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:

    Games:
      type: object
      description: Object contains a list of games on the server
      required:
        - games
        - limit
        - count
      properties:
        games:
          type: array
          items:
            $ref: '#/components/schemas/Game'
        limit:
          description: Games limit
          type: integer
          format: int32
        count:
          description: Current games number on the server
          type: integer
          format: int32

    Info:
      type: object
      description: Object contains basic information about the server
      required:
        - author
        - license
        - version
        - build
      properties:
        author:
          type: string
        license:
          type: string
        version:
          type: string
        build:
          type: string

    Game:
      type: object
      description: Object contains information about a game
      required:
        - id
        - limit
        - count
        - width
        - height
        - rate
      properties:
        id:
          description: Identificator
          type: integer
          format: int32
        limit:
          description: Players limit
          type: integer
          format: int32
        count:
          description: Current players number in the game
          type: integer
          format: int32
        width:
          description: Map width
          type: integer
          format: int32
        height:
          description: Map height
          type: integer
          format: int32
        rate:
          description: Rate
          type: integer
          format: int32

    Broadcast:
      type: object
      description: Object contains broadcast result flag
      required:
        - success
      properties:
        success:
          description: If the flag is true, broadcasting has succeeded
          type: boolean

    Capacity:
      type: object
      description: Object contains current server capacity
      required:
        - capacity
      properties:
        capacity:
          description: Capacity is the number of opened connections divided by the number of allowed connections for the server
          type: number
          format: double

    Error:
      type: object
      description: Contains an error code and description
      required:
        - code
        - text
      properties:
        code:
          description: Error code
          type: integer
          format: int32
        text:
          description: description
          type: string

    Deleted:
      type: object
      description: Object contains information about the deleted game
      required:
        - id
      properties:
        id:
          description: Game identificator
          type: integer
          format: int32

    Objects:
      type: object
      description: Contains all game objects and the map's properties
      required:
        - objects
      properties:
        objects:
          description: A list of all objects on the map
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Snake'
              - $ref: '#/components/schemas/Apple'
              - $ref: '#/components/schemas/Corpse'
              - $ref: '#/components/schemas/Mouse'
              - $ref: '#/components/schemas/Watermelon'
              - $ref: '#/components/schemas/Wall'
        map:
          $ref: '#/components/schemas/Map'

    Direction:
      type: string
      enum:
        - "north"
        - "east"
        - "south"
        - "west"

    Dot:
      type: array
      items:
        type: integer
        format: int32
        minimum: 0
        maximum: 255
        nullable: false
      minItems: 2
      maxItems: 2
      example: [2, 3]

    Dots:
      type: array
      items:
        $ref: '#/components/schemas/Dot'

    Snake:
      type: object
      description: Object Snake. The type is `snake`
      required:
        - type
        - id
        - dots
      properties:
        type:
          $ref: '#/components/schemas/ObjectType'
        id:
          $ref: '#/components/schemas/ObjectId'
        dots:
          $ref: '#/components/schemas/Dots'

    Apple:
      type: object
      description: Object Apple. The type is `apple`
      required:
        - type
        - id
        - dots
      properties:
        type:
          $ref: '#/components/schemas/ObjectType'
        id:
          $ref: '#/components/schemas/ObjectId'
        dot:
          $ref: '#/components/schemas/Dot'

    Corpse:
      type: object
      description: Object Corpse. The type is `corpse`
      required:
        - type
        - id
        - dots
      properties:
        type:
          $ref: '#/components/schemas/ObjectType'
        id:
          $ref: '#/components/schemas/ObjectId'
        dots:
          $ref: '#/components/schemas/Dots'

    Mouse:
      type: object
      description: Object Mouse. The type is `mouse`
      required:
        - type
        - id
        - dots
        - direction
      properties:
        type:
          $ref: '#/components/schemas/ObjectType'
        id:
          $ref: '#/components/schemas/ObjectId'
        dot:
          $ref: '#/components/schemas/Dot'
        direction:
          $ref: '#/components/schemas/Direction'

    Watermelon:
      type: object
      description: Object Watermelon. The type is `watermelon`
      required:
        - type
        - id
        - dots
      properties:
        type:
          $ref: '#/components/schemas/ObjectType'
        id:
          $ref: '#/components/schemas/ObjectId'
        dots:
          $ref: '#/components/schemas/Dots'

    Wall:
      type: object
      description: Object Wall. The type is `wall`
      required:
        - type
        - id
        - dots
      properties:
        type:
          $ref: '#/components/schemas/ObjectType'
        id:
          $ref: '#/components/schemas/ObjectId'
        dots:
          $ref: '#/components/schemas/Dots'

    ObjectId:
      type: integer
      format: int64
      description: An object's identifier
      example: 31

    ObjectType:
      type: string
      enum:
        - "apple"
        - "corpse"
        - "mouse"
        - "snake"
        - "wall"
        - "watermelon"

    Pong:
      type: object
      description: Pong message
      required:
        - pong
      properties:
        pong:
          type: integer
          format: int32

    Map:
      type: object
      description: Map properties
      required:
        - width
        - height
      properties:
        width:
          description: Map width
          type: integer
          format: int32
          example: 120
        height:
          description: Map height
          type: integer
          format: int32
          example: 75
