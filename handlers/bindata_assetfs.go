// Code generated by go-bindata.
// sources:
// ../openapi.yaml
// DO NOT EDIT!

package handlers

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _openapiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4f\x6f\xe4\xb6\x15\xbf\xcf\xa7\x78\x48\x0b\xf8\x92\xf1\x78\x6d\x6f\x1a\xe8\xe6\xf5\xa6\xa9\x0f\xee\x1a\x5d\x03\x3d\x14\x45\xc3\x91\xde\x8c\x98\xa5\x48\x85\xa4\x3c\x36\x8a\x7e\xf7\x82\xa4\xfe\x90\x12\xa5\x19\x39\xde\x71\x76\xb1\x73\xb2\xa9\xf7\xc8\xc7\x1f\xdf\x7f\x52\x94\xc8\x49\x49\x13\xb8\x38\x3d\x3b\x3d\x5b\x2c\x28\xdf\x88\x64\x01\xa0\xa9\x66\x98\xc0\x47\x4e\x3e\xe1\xf2\x23\xca\x07\x94\x70\x75\x77\xb3\x00\xc8\x50\xa5\x92\x96\x9a\x0a\xde\xfb\x4e\x15\x10\x50\xee\xef\x8d\x90\x50\x54\x4c\xd3\x92\x91\x27\x94\xa0\x0c\x21\x6c\x49\x81\xa7\x0b\x80\x07\x94\xca\xf2\x5f\x9e\xfe\x70\x7a\xb6\x00\x60\x34\x45\xae\xd0\xac\x0c\xc0\x49\x81\x09\xdc\xde\xdc\x2f\x00\x52\xc1\x35\x49\xb5\xff\xe1\xe6\x81\x70\xb8\xab\x54\xfe\x89\x72\x3b\x5c\x49\x96\x40\xae\x75\xa9\x92\xd5\x4a\xef\xa8\xd6\x28\x4f\x53\x51\xac\x0c\xe5\x7b\x7c\x40\x26\x4a\x94\x8b\x85\x13\x4d\x99\xb9\x96\x8e\x69\x45\x4a\x6a\xa7\x08\x36\x75\x5d\x49\x89\x5c\x03\xe5\x4a\x13\x9e\x62\x47\x6f\x16\x49\x56\x2b\x26\x52\xc2\x72\xa1\x74\xf2\xe3\xd9\x8f\x67\xf1\x49\xfe\x76\x7f\x7f\x37\x32\x83\x9a\x31\xc5\xc7\x6e\x8e\x45\x49\x74\x6e\xa5\x5f\x19\x1c\x95\xc3\x64\x8b\x35\x38\x00\xaa\x2a\x0a\x22\x9f\x12\xf8\x19\x35\x10\x60\x54\x69\x10\x1b\x0b\xba\xaa\x49\x82\xf9\x2d\x19\x63\x8e\x00\x04\x07\x9d\x63\x7d\x7e\x35\xb9\x26\x5b\xd5\xcc\x6e\xb6\xf0\xb3\x37\x55\x49\x24\x29\x50\xd7\x80\x36\x14\xee\x88\x18\x2d\xa8\x6e\x47\x01\x28\x4f\xe0\xb7\x0a\xe5\x93\x37\x16\x8a\x62\x45\xb0\x6c\x40\x7d\x41\x4e\x14\x48\x54\xa5\xe0\x0a\x3d\x5e\x95\xe6\x58\x90\xc4\x1b\x01\xd0\x4f\x25\x26\x40\xb9\xc6\x6d\x2b\xbf\xfb\x6d\x84\x2c\x88\xb6\xdf\x2e\xce\x07\xb2\x2a\x21\x35\xe5\xdb\xf9\xd2\xd6\x8c\x20\x2b\x76\x98\x6c\x4a\xcb\x70\x21\x00\xe4\x55\x11\x92\x1a\xc1\x54\x41\xa4\x1e\x8c\x4a\xc2\x33\x51\xd4\xc3\x0d\x28\x1e\xf8\xe7\x67\x67\xc9\x98\xc4\x57\xa1\x36\x00\xe1\x19\x90\x2c\xa3\xe6\x2b\x61\x60\xac\xde\x60\x44\x05\xf7\x66\x30\xb6\x87\x5c\x87\xf2\x91\xb2\x64\x34\xb5\xa4\xab\x5f\x95\xe0\x7d\xe9\x63\xdb\x37\xbf\x3f\x4b\xdc\x24\x70\xf2\xa7\x55\x2a\x8a\x52\x70\xe4\x5a\xad\x1c\xad\x5a\x59\x3c\x4f\x5a\x96\xcb\x70\x23\x31\xce\x76\xfb\xab\x1b\xfe\x40\x18\xcd\xee\x5a\x6d\x74\xf3\x94\xc6\xb4\xfa\x76\x71\x2d\x91\x68\x04\x02\x1c\x77\x16\x88\x98\x55\x0c\x88\x42\xcb\x80\x1d\xd5\x39\x6c\xe9\x03\x72\x28\x48\xe9\x99\x81\x05\xd5\xaa\xb0\x3a\xc0\x7c\x24\xfe\x56\xa1\xd2\xef\x44\xf6\xd4\x91\x98\x41\x2a\x31\x4b\x40\xcb\xaa\x53\xaa\xc8\x41\xf8\xc7\xf0\xb8\xdc\xed\x76\x4b\x73\x82\xcb\x4a\x32\xe4\xa9\xc8\x30\x0b\x4f\x20\x7e\x2a\x4e\x2d\xc5\xfa\x57\x4c\xfb\xea\x56\x4a\xe3\x33\x35\xf5\x15\xac\xf9\xd9\x3d\x0e\x87\x7b\x38\xde\x59\xc7\xdf\x18\xb5\x89\x07\x06\xc4\x1e\xf2\x43\x69\x62\x06\xec\x7e\x71\x33\xee\x7e\x05\xe5\xb4\xa8\x8a\x04\xde\x0c\x3e\xee\x68\xa6\xf3\xbd\x12\xdf\x92\xd2\x51\x7e\x0e\xe1\xc8\xa3\x13\xee\xfc\xed\xdb\xc1\xe7\x1c\xe9\x36\xdf\x8f\xa8\x91\xcf\x91\x1e\x5b\x40\xe4\x64\xcd\xf0\x3f\x3b\xc2\x58\x44\x1f\x7a\x62\xde\xe7\x54\xc1\x5a\x08\x86\x84\x77\xe6\x01\x94\x67\x46\x61\x51\xc1\x2e\x47\x9d\xa3\x04\x2d\x8c\x0f\x02\x3b\xab\xf9\xc7\xd7\x0f\x10\x12\xb8\xd0\xa0\xc5\xe8\x5e\xeb\x25\xa2\xe2\x6c\x48\xc5\x74\xcf\x8a\xdc\xaf\x35\xb1\x01\xdf\x72\x10\xb6\x9a\xf1\xb8\x52\x2c\xc3\xc3\x88\x7a\xe4\x37\xa3\x1e\xf9\xa6\x73\xb9\x40\xd6\xa2\xd2\x76\xfb\xa9\x75\x3e\x59\xdf\x44\x8e\xea\x89\x5f\xd6\x11\x9b\xdf\xdb\x39\xf3\xb8\x64\xf2\x27\x29\x85\xf4\x67\xb8\x18\x45\xd2\x30\xd0\x14\xa1\xe2\xe4\x81\x50\x66\x34\xf5\x7b\x48\x09\x37\xea\x93\x36\xce\xfc\xb5\x00\x6d\xf7\xe1\x72\xb6\xd5\x7f\x69\xf6\xbf\xe9\xc4\x8d\x0e\x14\x83\x8c\xc6\xaa\x29\x7a\x58\x3f\x01\xcd\x90\x6b\xba\x31\x9b\x12\xcf\xcf\xe9\x62\xfb\xeb\x28\xad\xce\xdc\xbc\x3f\x79\x5e\x62\x12\x37\x03\xe7\x01\xfa\x71\xe9\x0b\xb7\x82\xcb\xb3\xcb\xc3\xe7\x31\x22\xfc\x5d\xe8\xbf\x8a\x8a\x67\x2f\x65\x48\x19\x32\xd4\x38\x50\xba\xf7\x76\x78\x42\xcb\x02\x82\x2f\x43\xad\x3e\x58\xdd\x71\xb9\x5a\x20\xad\x49\x81\x8d\x86\x39\x2c\x5e\xcf\xd1\x3a\x4c\xb3\xaf\x50\xcb\xe0\x77\xb8\x6b\x77\x2a\xaf\xeb\xa7\x53\x52\x92\x94\xea\xa7\x71\x2f\x5d\xb7\x3b\x1a\xc2\x11\x03\xf8\xe8\x17\xd2\x03\xaf\xad\xc2\x39\x4e\xe1\xba\xfe\x0b\xa8\x72\x89\x50\x55\xac\xd1\xaa\xab\x28\x91\x63\x66\xa0\xe0\x98\x9a\x19\x14\x64\xf4\x81\x66\x98\x19\x5b\x0c\x4a\x65\x3f\x81\x99\x69\x31\xed\xfa\xb5\x81\x04\x7d\x80\xa3\x1e\x45\x23\x89\x3d\x8d\xa6\x1f\x15\x3f\x89\x78\xf4\x98\x6c\x61\x4c\x1f\xcb\x30\x98\x0e\x26\x9c\x89\xeb\x3f\x50\x57\x92\xab\x43\x66\x3e\x2a\xca\x06\xba\x5e\x5e\xb2\x5a\x4b\x41\xb2\x94\x34\x95\x73\xb4\x86\x7e\xd7\xd0\x00\x81\x02\x95\x22\x5b\x3c\x20\x02\x04\x90\x44\xa6\xb0\xb5\x00\x63\x50\xd6\x45\x23\xe5\x4d\xb8\xf1\xca\xed\x58\xd8\xc9\xb0\x94\x68\xca\x8a\xb0\x66\x7e\x91\x88\xf3\xc5\x16\xe8\x35\xa8\xfb\x0b\xca\x0e\xfc\x35\x42\x7b\xfa\x98\xd9\x72\x3d\x38\x0b\x85\x0c\xd3\x48\xc0\x0c\x25\x8d\x74\xb8\xa6\x2b\xae\x50\x83\x9e\x17\xe4\x6d\x8b\x98\x1a\x17\xd9\xee\xc0\xcc\x54\x31\x0d\x1b\x46\xb6\xaf\x61\x5c\xad\x86\x7f\x8b\xef\x41\x7c\xf7\x0e\xc8\x54\xce\xc0\xc5\xee\x8f\x52\x94\xad\x9c\x95\x4d\x74\xd5\xbb\x1e\x6a\x4d\xda\x34\x06\x0b\x52\xce\x75\x81\x4d\xeb\x7d\x74\xa6\xe3\xa7\xcc\x57\x53\xe2\x1c\xf5\x78\x9c\x5d\xbf\x70\x43\x18\x5e\xdf\x76\x56\x25\xe5\xdb\x71\xfd\xba\xa3\x7c\xbb\x2c\x05\xdf\x36\xa1\xa7\x73\xa5\x87\x27\x31\x77\xb4\xe3\x37\x7e\x3d\xcd\x31\xfd\x14\x26\x89\xb5\x59\x52\xd6\xe5\xae\x33\x55\xe5\xce\x09\x39\xb8\x96\x39\x9a\x86\x18\x01\x4e\x16\xdd\x87\x64\xb1\x18\x9a\x8c\xb3\x86\x66\x62\xca\x13\x28\x49\xdb\xc6\x73\x77\x3f\x34\x5b\xc4\x85\x88\x77\x53\x63\x3d\xd4\x68\x46\x30\xb8\x2d\xea\xe5\x2e\x8b\x01\xe4\x03\xad\x4d\x62\x53\xd5\x54\xde\x56\x17\x23\xc8\x4f\xa1\x1e\x43\xfc\x20\x77\x09\xe0\x69\xf4\x88\x80\x1a\x25\x27\xac\xa9\x6f\xd0\x50\x1e\x59\x46\xdf\x70\xa3\x42\xda\x03\x31\xe1\x68\x63\x48\x8e\x28\xdd\xa2\xe1\x74\x0a\xeb\x44\x6d\x4f\x3a\x92\xec\x4d\xa4\x3b\xaa\x7f\xc3\x1b\xbd\xc0\x1d\xe6\x5e\xcb\xe0\x3e\x78\xd8\xf5\x5e\x42\x2a\x2a\xde\xfc\x1f\xcb\x32\xb7\xbe\xd0\x9d\xe0\x44\x4a\xe2\xdf\x98\x52\x8d\x85\x3a\x1c\xa2\xb0\xe7\x36\xb8\x62\x1a\xbb\x2d\x1e\x88\x31\xbc\x01\x89\xdf\x7c\xd8\x5d\x8e\x57\xc3\xf5\x13\x00\x87\x6c\x53\x8b\x47\x00\x3e\x7c\xe1\xda\xcc\x9b\x72\x76\xfe\x79\xaf\x89\xa2\xe9\x61\x15\xea\xf0\xd0\x49\xa5\x73\x21\x83\x53\xb7\x2f\x2e\xbc\x91\xfa\x51\x86\x37\xb2\xae\x28\xcb\x26\x34\xc1\x4d\x3a\x54\x85\x5e\x19\x10\x3c\xee\x98\xa0\x6b\x5e\x85\xec\xa3\xb3\x62\x8d\x52\xb5\x86\xf5\x5c\x9c\xf7\x34\xe0\x63\xe8\xb6\x71\x64\x9f\x3d\x0d\x6f\x93\x96\xfd\x2b\xbd\x25\x48\xd2\xf6\xc0\x62\xa8\xd3\x6c\xbc\x9b\x1e\xa9\x90\x61\xb6\x69\x4c\x1b\x5f\x70\xaf\xfb\x99\xcd\xaf\x29\x41\x6b\x03\xac\x5f\x86\xf4\x4a\xd0\x79\x0b\x0f\xae\x82\xf7\x5e\x01\xcf\x9b\x7f\x78\x97\xbb\xff\x0e\x77\xde\x0a\x46\x3d\xc6\xdb\x4d\x44\xcf\xc7\xc6\x7e\x78\x17\x36\x7f\x9e\xe1\x9f\x26\xaa\xef\x98\xd1\xa8\x2a\x4d\x51\xa9\x09\x4d\xaf\x29\xc6\xd5\xdd\xb5\x2a\xcd\x3a\xb6\x6d\x2a\x2b\xfc\xbe\x13\xc3\x64\xc2\x39\x51\x6e\x16\xcc\x30\x1b\xe0\xd2\xdc\x20\xdb\x0f\xd7\x41\xdf\x77\xfe\xf6\xd3\x5a\x67\x55\xb4\x3b\x1c\x03\xa0\x47\x12\x43\x20\xed\x09\x35\x90\xe2\xf7\xb4\x8d\x3b\x5a\xc2\x98\xd8\xf5\x88\x9b\x17\x1b\x23\xe1\xce\x31\x47\x54\x2a\x13\xd5\x9a\xa1\xc3\x34\x48\x14\xf7\x01\x7a\xdd\x26\x36\xdc\xe5\x8d\x90\x8a\x0c\xed\xab\x1a\x8f\x6e\x0a\x4f\x91\xf9\xf1\x4c\xe3\xe3\x54\x1a\x63\xa8\x47\x61\xfd\xa9\x5d\xff\xd9\x66\x6a\x96\x1f\x9d\x7f\xb8\x21\x88\xc6\xb1\xfa\x9a\xe8\xe5\x42\xd9\xc8\xdd\xd7\x64\x50\x9b\x19\x84\x22\xf5\xce\x5c\x0c\xed\x87\x0f\x7e\x43\x66\x8e\xfa\xd4\x4f\x1a\xdb\x6e\x86\xd1\xa0\xba\x9d\x71\xa2\xbc\xdd\x4c\xec\xbd\x66\x9d\x00\x40\x84\xd2\x0d\xc4\xe9\xba\x45\x93\x7d\x1e\x98\x93\x3f\x0b\x8e\x1f\x36\xfd\x4a\x39\xde\x15\x6a\xd2\x6a\xfb\x40\xf7\x64\x16\xcb\x55\x59\xb2\x99\x2c\xd7\x42\x96\x6a\x26\xcf\xad\xa8\xe6\xb2\xfc\x93\x68\x94\x05\x32\xc1\xe7\xf2\x31\xd6\x71\x14\xa4\xdc\xd7\xc2\x69\x65\x24\xe5\x49\x6d\x88\x54\x3a\xc7\x18\xaa\x63\x90\x99\x86\x8f\x39\x97\xf0\x1d\x17\x52\xe7\xdf\xf9\x23\x48\x94\x0e\x06\x94\xa8\x7a\x24\x3b\x34\x24\x6e\x51\xd1\x0b\xc6\xbe\x8e\xf4\xf4\xe3\xf0\x8e\x85\xf7\x52\xee\xcc\x03\x25\xf2\xfc\x8b\x57\xcc\xf6\x6f\x13\xd8\x10\xd6\xd6\x0a\x05\xe5\x37\x76\x6d\x68\x66\x2c\xc8\x63\x6f\x04\x1f\x49\x51\x1a\xc6\x7f\x9d\x7f\x0f\x17\xff\x6e\xb7\xa3\x0e\xde\xcf\xe4\xe5\xb9\xd0\xf5\xb1\x58\xf5\x9e\xe9\x1d\x2d\xcf\x29\xdc\xe7\x68\x39\x4c\xe4\xfc\xc5\x3e\x4f\xff\x65\xc2\x21\x18\xca\xb1\x84\x3f\x13\x93\x9e\xc2\x8a\x75\xa0\xc2\x39\x11\xef\x9f\x4a\xcf\x32\x42\x57\xbb\x9f\xfb\xc6\x6b\x57\x66\x22\x74\x51\x7b\x50\x55\x35\xac\xd6\x05\xcc\x84\xd5\xf2\xf4\x60\x25\x66\xec\xeb\x84\x75\x06\xaa\x35\xa8\xce\x49\xce\x44\xd5\x31\xf5\x60\x4d\xed\xe0\xd7\x89\xeb\x73\xd4\xd5\x86\x92\x99\xc0\x5a\x9e\x1e\xae\x85\x19\x7b\x01\x58\xed\xbf\x4d\xc0\xf8\xe3\x42\x3d\x4b\x85\x5b\xbe\x7e\x20\xdc\xcb\xdd\x30\xd4\x87\xd5\x05\xf1\x99\x27\xd6\x31\xf6\x8e\x6d\xd7\x7e\xf8\x66\x12\xaa\x45\x99\xb1\xd9\xf8\x32\x36\x40\x96\xb1\x6f\x98\x36\x98\x36\x13\x85\xb8\x86\x29\x97\x97\x70\xfd\x70\x19\x03\xfb\x8a\xd7\x27\x71\xa2\xda\x22\xa9\xe5\x6e\xd3\xa6\x8b\x37\xfe\x92\xf7\x1e\x56\x87\xe4\x9d\x36\xec\x06\x49\xa5\x8b\x18\xc1\x90\x75\x76\x61\x2e\x6a\x92\xa0\x30\x17\x25\x8c\xf5\x06\x1a\x53\xab\x53\xd4\x3b\xd1\x5c\x69\xee\xd7\x33\x7b\x6d\xd8\x7f\xf1\x31\x54\xaa\x52\xb4\x3b\x8b\x29\x4e\xe9\xad\x38\x76\x0a\x10\xaf\x28\x6f\xbb\xcc\x7f\x9f\xac\xb7\xa4\x3c\xac\x52\x9c\xec\xe6\xc6\xe4\xff\xdc\x0d\x48\x4f\x8b\xde\x9c\x77\x09\xfe\xe7\xef\x4b\x7a\x0b\xff\xe5\xed\xe2\xff\x01\x00\x00\xff\xff\xb9\x3a\x06\xc5\x59\x3a\x00\x00")

func openapiYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiYaml,
		"openapi.yaml",
	)
}

func openapiYaml() (*asset, error) {
	bytes, err := openapiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"openapi.yaml": openapiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"openapi.yaml": &bintree{openapiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
