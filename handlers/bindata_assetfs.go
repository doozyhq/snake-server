// Code generated by go-bindata.
// sources:
// ../openapi.yaml
// DO NOT EDIT!

package handlers

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _openapiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdd\x6e\xdc\xb8\x15\xbe\x9f\xa7\x38\xd8\x16\x70\x0b\xec\x78\x1c\x3b\x69\x17\x73\x97\x38\xed\xd6\x40\x8d\x18\x8d\x81\x5e\x14\x45\x97\x23\x1e\xcd\x70\x97\x22\xb5\x24\xe5\xf1\xa0\xe8\xbb\x17\x24\x45\x89\x92\x38\x9a\x91\x9d\xd8\x49\xd6\x73\x13\x98\x3a\x87\xfc\xf8\xf1\xfc\xf1\x27\xb2\x44\x41\x4a\xb6\x84\x8b\xd3\xb3\xd3\xb3\xd9\x8c\x89\x5c\x2e\x67\x00\x86\x19\x8e\x4b\xf8\x28\xc8\x2f\x38\xff\x88\xea\x0e\x15\xbc\xbd\xb9\x9a\x01\x50\xd4\x99\x62\xa5\x61\x52\xf4\xbe\x33\x0d\x66\x83\xa0\xfd\x5f\xb9\x54\x20\x05\x67\x02\x81\xa8\x8c\x50\x84\x35\x29\x10\xe6\xa0\xad\xce\xe9\x0c\xe0\x0e\x95\x76\xbd\xbc\x3e\xbd\x38\x3d\x9b\x01\x70\x96\xa1\xd0\x68\xc7\x07\x10\xa4\xc0\x25\x5c\x5f\xdd\xce\x00\x32\x29\x0c\xc9\x4c\xfc\xe1\xea\x8e\x08\xb8\xa9\xf4\xe6\x17\x26\x5c\x73\xa5\xf8\x12\x36\xc6\x94\x7a\xb9\x58\x98\x2d\x33\x06\xd5\x69\x26\x8b\x85\x95\x7c\x8f\x77\xc8\x65\x89\x6a\x36\xf3\xf0\xb4\xed\x6b\xee\x95\x16\xa4\x64\xae\x8b\xce\xd4\x2e\x2b\xa5\x50\x18\x60\x42\x1b\x22\x32\x6c\xe5\xed\x20\xcb\xc5\x82\xcb\x8c\xf0\x8d\xd4\x66\xf9\xc3\xd9\x0f\x67\xe9\x4e\xfe\x76\x7b\x7b\xb3\xa7\x07\x3d\xa1\x8b\x8f\x6d\x1f\xb3\x92\x98\x8d\x43\xbf\xb0\x7c\x6a\xcf\xc9\x1a\x6b\x72\x7a\xca\x3f\xa2\x01\xc2\xb9\xa3\x5e\xd7\x02\x86\xac\x75\x10\xb6\x88\x7e\x8c\xbe\x95\x44\x91\x02\x4d\xcd\x4f\x90\xf0\x8c\x73\x56\x30\xd3\xb4\x02\x30\xb1\x84\x5f\x2b\x54\xbb\xa8\xad\x3b\xb8\xed\xd8\xab\x81\x91\xa0\x30\x43\x76\x87\xc0\x04\x10\x50\xa8\x4b\x29\x34\x46\xba\x3a\xdb\x60\x41\x96\x51\x0b\x80\xd9\x95\xb8\x04\x26\x0c\xae\x51\x75\xbe\xe4\x52\x15\xc4\xb8\x6f\x17\xe7\x03\xac\x5a\x2a\xc3\xc4\x7a\x3a\xda\x5a\xd1\x0d\x7c\x14\x36\x6d\x54\x77\x20\x00\x14\x55\xd1\x15\xb5\xc0\x74\x41\x94\x19\xb4\x2a\x22\xa8\x2c\xea\xe6\x40\x4a\x44\xfe\xf9\xd9\xd9\x72\x1f\xe2\x7f\xa0\xa9\x94\xd0\x7e\x71\x41\x8a\xe0\x79\x44\x50\x20\x94\x32\x2b\x45\x38\x58\x97\xb6\x5c\x31\x29\xa2\x9e\xac\x4b\xa1\x30\x5d\x9c\xa4\x2c\x39\xcb\x9c\xe8\xe2\x67\x2d\x45\x7f\x16\x29\x1a\xec\xef\xf7\x0a\xf3\x25\x9c\xfc\x6e\x91\xc9\xa2\x94\x02\x85\xd1\x0b\x2f\xab\x17\x8e\xd7\x93\x46\xe5\xf5\xc8\x84\xae\xc4\x1d\xe1\x8c\x46\x56\xf8\x1c\x80\xff\xa2\x94\x54\x1e\x70\x69\x5d\x33\xe5\x57\x97\x0a\x89\x41\x10\xb8\x75\xec\x1f\xe1\x59\x0a\x7f\xad\x50\x9b\x77\x92\xee\x5a\x11\xdb\xc8\x14\xd2\x25\x18\x55\xb5\xf6\x96\x98\x6a\x3c\xd1\xfb\xf9\x76\xbb\x9d\xdb\x45\x9d\x57\x8a\xa3\xc8\x24\x45\xda\x9d\x63\x7a\xde\xde\x62\xe5\xea\x67\xcc\xfa\x96\x58\x2a\x1b\x1d\x0d\x8b\x6d\x2f\xfc\x9c\x07\x0f\x9b\x7b\x94\xdc\x70\xb2\x43\x15\xfc\xdd\x46\xff\x88\x99\x21\x8a\x94\x4f\xfb\x5f\xda\xb3\xdb\x5f\xc1\x04\x2b\xaa\x62\x09\xaf\x06\x1f\xb7\x8c\x9a\xcd\x41\xa4\xd7\xa4\xf4\x92\x9f\x03\x1c\xb9\xf7\xe0\xce\xdf\xbc\x19\x7c\xde\x20\x5b\x6f\x0e\x33\x69\xf1\x79\xd1\xa7\x06\x88\x82\xac\x38\xfe\x67\x4b\x38\x4f\xd8\x41\x7f\xc1\x83\x97\x02\x13\xd4\xda\x26\x6a\xd8\x6e\xd0\x6c\x50\xd9\x70\x4f\x28\x05\xd7\x91\xfb\xa3\x71\x15\x90\x0a\x84\xdc\x3f\xb3\x95\x94\x1c\x89\x48\x0e\x9e\x93\x8a\x9b\x9e\xaf\xf8\x5f\xe3\x48\x03\xbd\xf9\x20\x6f\x85\xf6\xb4\x09\xcc\xbb\xd4\x27\x43\xf2\xab\x83\x21\x39\x73\xf1\x81\xd6\x33\xee\x3b\xdc\x93\xc6\xde\xaf\x34\xf4\xda\xdf\x9b\x51\xc0\x06\x95\x4d\x6f\x75\xd2\x43\xab\xfa\x45\x60\xbe\xd8\x8b\xd9\xd6\xc9\x2c\x43\xa8\x04\xb9\x23\x8c\x5b\x5f\xfb\x1e\x32\x22\x84\x34\xb5\xc5\xf4\x33\xca\xf3\xcc\xc4\x57\x96\x8b\xff\x32\xfa\xbf\xc3\xe5\xa5\x33\xf1\xd5\x0e\x18\x45\x61\x58\x6e\x41\x35\x0b\x31\xbd\xd4\x4c\xe1\x6b\x25\x9d\x41\x5f\xbd\x3f\x79\x7c\xbd\xf4\xe2\x94\xd3\xcd\x22\x00\x7e\xbd\x17\xb0\x9d\x9a\x8d\xee\x90\xcb\x4a\xd0\x2f\x00\xec\xd7\x16\x41\x28\x72\x34\x98\xf4\xb5\xf7\xee\xd3\x57\xe8\x6e\x1d\xa4\x20\xf3\x7a\x92\xf4\xd9\xe2\x9c\x67\x92\xbe\xf8\xe0\x8b\x0f\x7e\xea\x2c\x4e\x23\x27\x55\xb6\x8c\x04\xb2\x25\xbb\xe7\x4d\xe6\x19\x29\x49\xc6\xcc\x6e\x90\xca\xfb\xe1\xc2\x1f\xe3\xed\xcb\xf3\xf5\x0a\x71\x49\x28\xfc\x21\xf4\xf9\xc7\xc7\x85\x86\xba\xcf\xd0\xdb\x73\xf0\x74\x59\x8f\xed\xa8\x0a\xa7\x9f\x8f\xa7\x69\x78\xe8\xf2\xd0\xe8\xd9\x76\x04\x64\x25\xab\x30\xc2\x73\x70\x75\x25\x72\xd9\xab\x0f\x17\x2b\x25\x09\xcd\x48\x38\x27\x89\x4f\x4c\xc6\xd2\x51\x67\xae\xef\x42\x1f\x40\xa0\x40\xad\xc9\x1a\xed\xa6\xb1\xac\x4f\x14\x98\xf0\x0e\xb5\x65\x66\x03\x25\xd1\x1a\x69\x32\xfd\x7d\x92\x14\xf7\xd5\x9e\xd2\xd4\xc4\x1d\x3e\x5d\x68\x09\x6e\xd6\xce\x1d\xd7\x44\x74\x6b\xe4\x98\x25\x52\x74\x17\x62\xe2\xe8\x73\x7c\x27\x5e\x43\x7c\x9c\x43\x78\x62\xfc\x95\x00\x13\x48\xa3\x59\x28\xd4\x15\x37\x90\x73\xb2\x7e\x0e\xf7\x68\xcc\x78\x5a\x65\xc1\x44\x59\x99\x97\xaa\x62\x22\xd8\xdf\x52\x55\x11\x59\xf8\x17\x52\x53\x44\x09\xc0\xfb\xe3\xf0\x1e\xea\xe8\xe8\x1f\xee\xa8\xea\x8e\x40\x0a\x28\x48\xf9\xec\xdb\x96\xbd\x90\x9e\x94\xf2\x0f\x1e\xc1\xcb\x5e\xe5\x25\xaa\x24\xdc\xb0\x64\x62\xfd\x88\x7a\xf5\x86\x89\xf5\xbc\x94\x62\x1d\xea\x9e\x87\x79\xcc\x8d\xef\x61\x70\xa1\xfb\x64\x84\x58\x00\x27\xb3\xf6\xc3\x72\x36\x1b\x46\x0e\x1f\x14\x42\xc7\x4c\x2c\xa1\x24\xcd\xf9\xbf\xbf\x35\x66\xc1\x04\xfb\x20\xd2\x97\x2e\xa9\xab\x96\x64\xad\x38\xb4\xf9\x6e\xf9\x3a\x0b\x23\x7a\xe4\x1e\x6b\x43\x7e\xa2\x1e\xec\x74\xf8\xa1\x53\x10\x69\xe0\x4c\x1b\x90\x79\xff\x5a\xb8\x0f\x30\xb2\x90\xf8\x75\xc0\xf0\xc6\x64\x0e\x99\xac\x44\xf8\x3b\x55\x82\xae\x63\xb8\x2d\x64\xa2\x54\x27\x4f\x31\x83\x45\xaf\x70\x3d\xfe\x9c\x74\x70\x09\xb9\xef\xa9\xc1\x00\xc6\xf0\xae\x2c\x7d\x47\xe6\x66\xb9\x77\x84\xf0\x1c\xc4\xb3\xea\x64\x07\xdc\x1e\x3f\xa6\xfb\x70\xd5\xec\x36\xa7\x2f\x72\x26\x8b\x42\x8a\x43\xbb\xc3\xd4\x62\x93\xca\x6c\xa2\xb8\x35\x0f\xaf\x6e\xa2\x96\xfa\x61\x4e\xd4\xb2\xaa\x18\xa7\x23\x16\xe0\x3b\x1d\x9a\x40\x6f\x8b\xd0\x79\xe0\x33\x22\x17\x5e\x06\x1d\x92\x73\xb0\xf6\x4a\x35\xae\xf4\x50\x92\x87\xec\x46\xfb\xa1\x14\xb7\x8c\x1e\xe9\x45\xc3\xfb\xc7\x79\xff\xca\x77\x0e\x8a\x18\x1c\xe1\x9c\xd1\xf1\xbc\x9a\xda\x22\xc3\x64\xaf\x38\xec\x77\xcd\xc6\xf1\x29\xdc\x2f\x8c\xe5\x1d\xb0\x3e\x19\x78\xf0\x98\x83\xf7\x02\x07\xdf\x09\x4c\xeb\x7f\x78\xe1\x7f\xf8\xa2\x7f\xda\x08\xd6\x46\xc6\x57\x27\xb2\xa2\xe3\xbb\x77\x1f\xde\x75\x8f\x76\xa6\xfb\xcf\xd8\xce\x3c\xe5\x3e\xba\xca\x32\xd4\x7a\xc4\xe6\x6b\x89\xbd\x33\xfe\x2b\x27\x6b\xf7\x0e\x51\x55\x08\x2c\x8f\x10\x30\xed\x95\x91\xba\xf7\x51\x79\x2d\x98\x13\xae\x87\x92\x39\x61\x1c\xe9\x80\xb5\xf0\x36\xc1\x7d\xb8\xec\x1c\xab\x3e\x20\x82\xd7\x16\x9d\x3e\x03\x4d\xd1\xd3\x13\x49\xf1\x93\xf5\x40\x0d\x50\x04\xd4\xe1\xb1\xa6\xa8\x8a\x15\xba\x5b\x19\x59\xa2\x40\x6a\xf1\x09\xcc\xac\xb0\x06\xca\xee\x18\x45\x0a\xab\x5d\x4f\x96\x70\x2e\xb7\x3d\xe1\x5c\xaa\xf6\xf0\xb3\x79\xf0\xd8\x25\xd0\xf7\x90\xb0\x3a\x2a\xab\x15\x47\x4f\xac\x2b\x6f\x8f\x65\xf5\xb2\x4d\x88\x14\x2d\x34\x57\x95\xbb\x25\xd6\x1b\xa9\x4c\x2c\x0d\x06\xef\xcd\x18\xbf\x92\xc6\x59\x30\x92\x4e\x52\x2d\xe9\x7e\xcf\x73\x73\xe8\x76\x38\xd5\xb3\xed\xf0\xfb\x4f\x0b\xdc\xdc\xfc\x5c\xa3\x0f\xa3\x99\xb0\xbe\xf6\xfa\x74\xc9\x30\x71\x8f\x37\x9a\x14\x9f\x3e\x89\xb9\x0f\x1f\xe2\x03\x8a\xe9\xf3\x0e\xcf\x67\x7b\x87\x01\xce\xc4\xec\xbf\xed\xac\x46\x38\xa8\x75\x47\x88\x90\x5d\x94\x03\x58\x7f\xaf\xab\xfa\x3d\x70\x1e\x52\x7c\x4b\x81\x1f\xf2\xfe\x4e\x2b\x7d\xb8\x12\x6a\x72\xf7\xde\xfb\x64\x92\xca\xdb\xb2\xe4\x13\x55\x2e\xa5\x2a\xf5\x44\x9d\x6b\x59\x4d\x55\xf9\x27\x31\xa8\x0a\xe4\x52\x4c\xd5\xe3\xbc\xd5\x28\x48\x19\x73\x38\x8a\x91\x94\x27\xb5\x2f\x32\xe5\xe3\x66\xd7\x2a\x3b\xe5\x6d\xf7\x19\xf1\x1c\xbe\x13\x52\x99\xcd\x77\x71\x0b\x12\x6d\x3a\x0d\x5a\x56\x3d\x91\x2d\x5a\x11\x3f\xa8\xec\x65\xf2\xd8\x46\x7a\xf6\x71\xfc\x8e\x37\x7a\x90\x79\x16\x91\x92\x78\x65\x28\x2a\xee\xce\x35\x97\x3e\xeb\xce\x1a\xed\x2b\x37\x36\x84\x1e\x0b\x72\xdf\x6b\xc1\x7b\x52\x94\x56\xf1\x5f\xe7\xdf\xc3\xc5\xbf\x9b\xe9\xe8\xa3\xe7\x33\xfa\x1e\x40\x9a\x7a\x59\x9c\x79\x4f\x0c\x14\x4e\xe7\x14\x6e\x37\xe8\x34\x6c\x62\xfd\xc9\xfd\x17\x87\x9f\x46\xe2\x41\xe7\x79\x79\x6f\xdf\x40\xe5\x68\xa0\x70\xb0\x8e\x34\x38\x0f\xf1\x76\x57\x46\x9e\xd1\x8d\xb8\x87\xb5\xaf\xa2\x87\x12\x54\x76\x23\xd4\x01\x56\x75\x4d\xab\x0b\x01\x13\x69\x75\x3a\x3d\x5a\x89\x6d\xfb\x36\x69\x9d\xc0\x6a\x4d\xaa\x0f\x92\x13\x59\xf5\x4a\x3d\x5a\x33\xd7\xf8\x6d\xf2\xfa\x10\x73\x75\xa9\x64\x22\xb1\x4e\xa7\xc7\x6b\x61\xdb\x3e\x01\xad\xee\xcf\x90\x30\xbe\x5c\xaa\x27\x99\x70\xa3\xd7\x4f\x84\x07\xb5\x83\x42\xbd\x58\x6d\x12\x9f\xb8\x62\xad\x62\x6f\xd9\xb6\xcd\x87\x17\x97\xd0\x0d\xcb\x9c\x4f\xe6\x97\xf3\x01\xb3\x9c\xbf\x70\x1a\x38\x0d\x1d\x75\x79\xed\x96\x5c\x51\xc1\xf5\xa7\xd7\x29\xb2\xdf\x8a\xf0\x20\x22\xec\x94\x1a\xdd\xa6\x68\xba\x78\x15\x0f\x78\x1b\x31\x75\x4c\xd5\xe9\x92\x6e\xa7\xa4\xf4\xf9\xa2\xd3\xe4\x42\x5d\xb7\x12\xb5\x25\x50\xb7\x12\x25\x9c\xf7\x1a\x82\xa3\xd5\x05\xea\x8d\x0c\xd7\x59\x87\xad\xcc\x5d\x3a\x85\xc7\x42\xb9\x92\xc5\xe1\x93\xef\x52\x36\xb3\x4c\x99\x50\x19\x8d\xbe\x6f\x3d\x20\xbd\xc5\xbc\x6e\xf7\x00\x87\x70\x5f\x1f\xbb\x65\x1c\x3d\x1e\x4e\xe1\xff\xdc\x87\x99\x91\x45\xbd\x3a\x6f\x4b\xfd\xcf\x7f\xc6\x19\x0d\xfc\xe7\x37\xb3\xff\x07\x00\x00\xff\xff\x22\xd1\xe5\xd8\xb2\x3c\x00\x00")

func openapiYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiYaml,
		"openapi.yaml",
	)
}

func openapiYaml() (*asset, error) {
	bytes, err := openapiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"openapi.yaml": openapiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"openapi.yaml": &bintree{openapiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
